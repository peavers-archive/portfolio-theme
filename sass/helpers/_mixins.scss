// scss-lint:disable all
@function parse-int($n) {
  @return $n / ($n * 0 + 1);
}

@mixin safe-rem($property, $values) {
  $rem-base: 16;
  $px: ();
  $rem: ();

  @each $value in $values {
    @if $value == 0 or $value == auto {
      $px: append($px, $value);
      $rem: append($rem, $value);
    } @else {
      $unit: unit($value);
      $val: parse-int($value);
      $px: append($px, $value + px);
      $rem: append($rem, ($val / $rem-base + rem));
    }
  }

  @if $px == $rem {
    #{$property}: $px;
  } @else {
    #{$property}: $px;
    #{$property}: $rem;
  }
}

// Font imports
@mixin font-face($font-family, $file-path, $weight: normal, $style: normal) {
  @font-face {
    font-family: $font-family;
    font-weight: $weight;
    font-style: $style;

    src: url("#{$file-path}.eot");
    src: url("#{$file-path}.eot?#iefix") format("embedded-opentype"),
      url("#{$file-path}.svg##{$font-family}") format("svg"),
      url("#{$file-path}.woff") format("woff"),
      url("#{$file-path}.ttf") format("truetype");
  }
}

@mixin transition($args...) {
  -webkit-transition: $args;
  -moz-transition: $args;
  -ms-transition: $args;
  -o-transition: $args;
  transition: $args;
}

//Border
@mixin border-radius($radius) {
  -webkit-border-radius: $radius + px;
  border-radius: $radius + px;
  background-clip: padding-box;
}

// Single side border-radius
@mixin border-top-radius($radius) {
  -webkit-border-top-right-radius: $radius + px;
  border-top-right-radius: $radius + px;
  -webkit-border-top-left-radius: $radius + px;
  border-top-left-radius: $radius + px;
  background-clip: padding-box;
}

@mixin border-right-radius($radius) {
  -webkit-border-bottom-right-radius: $radius + px;
  border-bottom-right-radius: $radius + px;
  -webkit-border-top-right-radius: $radius + px;
  border-top-right-radius: $radius + px;
  background-clip: padding-box;
}

@mixin border-bottom-radius($radius) {
  -webkit-border-bottom-right-radius: $radius + px;
  border-bottom-right-radius: $radius + px;
  -webkit-border-bottom-left-radius: $radius + px;
  border-bottom-left-radius: $radius + px;
  background-clip: padding-box;
}

@mixin border-left-radius($radius) {
  -webkit-border-bottom-left-radius: $radius + px;
  border-bottom-left-radius: $radius + px;
  -webkit-border-top-left-radius: $radius + px;
  border-top-left-radius: $radius + px;
  background-clip: padding-box;
}

@mixin box-shadow($top, $left, $blur, $color, $inset: false) {
  @if $inset {
    -webkit-box-shadow: inset $top $left $blur $color;
    -moz-box-shadow: inset $top $left $blur $color;
    box-shadow: inset $top $left $blur $color;
  } @else {
    -webkit-box-shadow: $top $left $blur $color;
    -moz-box-shadow: $top $left $blur $color;
    box-shadow: $top $left $blur $color;
  }
}

@mixin icon($unicode) {
  @extend %icon;
  content: "\#{$unicode}";
}

@mixin animate-slide() {
  -webkit-animation-name: slide;
  -webkit-animation-timing-function: ease-in-out;
  -webkit-animation-delay: 0.25s;
  -webkit-animation-duration: 1.25s;
  -webkit-animation-fill-mode: both;
  -webkit-animation-iteration-count: 1;
}

@mixin animate-drop() {
  position: relative;
  opacity: 0;
  -webkit-animation-name: drop;
  -webkit-animation-timing-function: ease-in-out;
  -webkit-animation-delay: 1s;
  -webkit-animation-duration: 1s;
  -webkit-animation-fill-mode: forwards;
  -webkit-animation-iteration-count: 1;
}

@mixin animate-screen() {
  background-color: rgba(255, 255, 255, 0.6);
  border-radius: 3px;
  opacity: 0;
  -webkit-animation-name: screen;
  -webkit-animation-timing-function: ease-in-out;
  -webkit-animation-duration: 1s;
  -webkit-animation-fill-mode: forwards;
  -webkit-animation-iteration-count: 1;
}

@mixin delay($time) {
  -webkit-animation-delay: $time;
}

@mixin button($color) {
  @include transition(all 0.4s ease-in-out);
  @include safe-rem(padding, 10);
  @include border-radius(3);
  display: block;
  font-family: "OpenSans Bold", serif;
  background-color: $color;
  color: $white;
  border: transparent;
  cursor: pointer;
  text-align: center;
  -webkit-box-shadow: rgba(0, 0, 0, 0.117647) 0 0 2px 0,
    rgba(0, 0, 0, 0.239216) 0 2px 4px 0;
  box-shadow: rgba(0, 0, 0, 0.117647) 0 0 2px 0,
    rgba(0, 0, 0, 0.239216) 0 2px 4px 0;

  &:hover {
    color: $white;
    background-color: darken($color, 10%);
  }
}

@mixin button-icon($color, $icon) {
  @include transition(all 0.4s ease-in-out);
  @include border-radius(3);
  @include safe-rem(padding, 3);
  text-align: center;
  background-color: $color;
  color: $white;
  display: block;
  font-family: "OpenSans Bold", serif;
  -webkit-box-shadow: rgba(0, 0, 0, 0.117647) 0 0 2px 0,
    rgba(0, 0, 0, 0.239216) 0 2px 4px 0;
  box-shadow: rgba(0, 0, 0, 0.117647) 0 0 2px 0,
    rgba(0, 0, 0, 0.239216) 0 2px 4px 0;

  &:hover {
    color: $white;
    background-color: darken($color, 15%);
  }

  &:before {
    @include icon($icon);
    @include safe-rem(margin-right, 15);
    @include safe-rem(font-size, 25);
  }

  .button-text {
    vertical-align: text-bottom;
  }
}

@mixin circle($radius) {
  @include safe-rem(width, $radius);
  @include safe-rem(height, $radius);
  @include border-radius($radius/2);
}

// generic transform
@mixin transform($transforms) {
  -moz-transform: $transforms;
  -o-transform: $transforms;
  -ms-transform: $transforms;
  -webkit-transform: $transforms;
  transform: $transforms;
}
// rotate
@mixin rotate($deg) {
  @include transform(rotate(#{$deg}deg));
}

// scale
@mixin scale($scale) {
  @include transform(scale($scale));
}
// translate
@mixin translate($x, $y) {
  @include transform(translate($x, $y));
}
// skew
@mixin skew($x, $y) {
  @include transform(skew(#{$x}deg, #{$y}deg));
}
//transform origin
@mixin transform-origin($origin) {
  moz-transform-origin: $origin;
  -o-transform-origin: $origin;
  -ms-transform-origin: $origin;
  -webkit-transform-origin: $origin;
  transform-origin: $origin;
}

// scss-lint:enable all
